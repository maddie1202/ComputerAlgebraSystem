//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\madel\source\repos\ComputerAlgebraSystem\ComputerAlgrebraSystem\Grammar\Math.g4 by ANTLR 4.6.6-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ComputerAlgrebraSystem.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class MathLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, OP_ADD=6, OP_SUB=7, OP_MUL=8, 
		OP_DIV=9, OP_POW=10, VAR=11, NUM=12, WS=13;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "OP_ADD", "OP_SUB", "OP_MUL", 
		"OP_DIV", "OP_POW", "VAR", "NUM", "WS"
	};


	public MathLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'='", "'('", "')'", "'sqrt'", "'exp'", "'+'", "'-'", "'*'", "'/'", 
		"'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "OP_ADD", "OP_SUB", "OP_MUL", "OP_DIV", 
		"OP_POW", "VAR", "NUM", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Math.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\xFT\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x3\x2\x3\x2\x3\x3"+
		"\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x6"+
		"\r:\n\r\r\r\xE\r;\x3\r\x3\r\x6\r@\n\r\r\r\xE\r\x41\x5\r\x44\n\r\x3\r\x3"+
		"\r\x5\rH\n\r\x3\r\x6\rK\n\r\r\r\xE\rL\x5\rO\n\r\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x2\x2\x2\xF\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11"+
		"\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x3\x2\a\x4\x2\x43"+
		"\\\x63|\x3\x2\x32;\x4\x2GGgg\x4\x2--//\x5\x2\v\f\xF\xF\"\"Y\x2\x3\x3\x2"+
		"\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2"+
		"\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3"+
		"\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2"+
		"\x1B\x3\x2\x2\x2\x3\x1D\x3\x2\x2\x2\x5\x1F\x3\x2\x2\x2\a!\x3\x2\x2\x2"+
		"\t#\x3\x2\x2\x2\v(\x3\x2\x2\x2\r,\x3\x2\x2\x2\xF.\x3\x2\x2\x2\x11\x30"+
		"\x3\x2\x2\x2\x13\x32\x3\x2\x2\x2\x15\x34\x3\x2\x2\x2\x17\x36\x3\x2\x2"+
		"\x2\x19\x39\x3\x2\x2\x2\x1BP\x3\x2\x2\x2\x1D\x1E\a?\x2\x2\x1E\x4\x3\x2"+
		"\x2\x2\x1F \a*\x2\x2 \x6\x3\x2\x2\x2!\"\a+\x2\x2\"\b\x3\x2\x2\x2#$\au"+
		"\x2\x2$%\as\x2\x2%&\at\x2\x2&\'\av\x2\x2\'\n\x3\x2\x2\x2()\ag\x2\x2)*"+
		"\az\x2\x2*+\ar\x2\x2+\f\x3\x2\x2\x2,-\a-\x2\x2-\xE\x3\x2\x2\x2./\a/\x2"+
		"\x2/\x10\x3\x2\x2\x2\x30\x31\a,\x2\x2\x31\x12\x3\x2\x2\x2\x32\x33\a\x31"+
		"\x2\x2\x33\x14\x3\x2\x2\x2\x34\x35\a`\x2\x2\x35\x16\x3\x2\x2\x2\x36\x37"+
		"\t\x2\x2\x2\x37\x18\x3\x2\x2\x2\x38:\t\x3\x2\x2\x39\x38\x3\x2\x2\x2:;"+
		"\x3\x2\x2\x2;\x39\x3\x2\x2\x2;<\x3\x2\x2\x2<\x43\x3\x2\x2\x2=?\a\x30\x2"+
		"\x2>@\t\x3\x2\x2?>\x3\x2\x2\x2@\x41\x3\x2\x2\x2\x41?\x3\x2\x2\x2\x41\x42"+
		"\x3\x2\x2\x2\x42\x44\x3\x2\x2\x2\x43=\x3\x2\x2\x2\x43\x44\x3\x2\x2\x2"+
		"\x44N\x3\x2\x2\x2\x45G\t\x4\x2\x2\x46H\t\x5\x2\x2G\x46\x3\x2\x2\x2GH\x3"+
		"\x2\x2\x2HJ\x3\x2\x2\x2IK\t\x3\x2\x2JI\x3\x2\x2\x2KL\x3\x2\x2\x2LJ\x3"+
		"\x2\x2\x2LM\x3\x2\x2\x2MO\x3\x2\x2\x2N\x45\x3\x2\x2\x2NO\x3\x2\x2\x2O"+
		"\x1A\x3\x2\x2\x2PQ\t\x6\x2\x2QR\x3\x2\x2\x2RS\b\xE\x2\x2S\x1C\x3\x2\x2"+
		"\x2\t\x2;\x41\x43GLN\x3\x2\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ComputerAlgrebraSystem.Grammar
